version: "3"
services:
  prometheus:
    image: prom/prometheus:v2.4.3
    container_name: 'prometheus'
    volumes:
    - ./config/:/etc/prometheus/
    - ./config/localtime:/etc/localtime:ro
    ports:
     - '9090:9090'
  grafana:
    image: grafana/grafana:5.2.4
    container_name: 'grafana'
    ports:
      - '3000:3000'
    volumes:
      - ./grafana/config/grafana.ini:/etc/grafana/grafana.ini  #grafana报警邮件配置
      - ./grafana/provisioning/:/etc/grafana/provisioning/  #配置grafana的prometheus数据源
      - ./config/localtime:/etc/localtime:ro
    env_file:
      - ./grafana/config.monitoring  #grafana登录配置
    depends_on:
      - prometheus  #grafana需要在prometheus之后启动
  elasticsearch:
    image: elasticsearch:6.4.0
    container_name: elasticsearch
    environment:
      - "cluster.name=elasticsearch" #设置集群名称为elasticsearch
      - "discovery.type=single-node" #以单一节点模式启动
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m" #设置使用jvm内存大小，稍微配置大点，不然有可能启动不成功
    volumes:
      - /usr/local/var/elasticsearch/plugins:/usr/share/elasticsearch/plugins #插件文件挂载
      - /usr/local/var/elasticsearch/data:/usr/share/elasticsearch/data #数据文件挂载
    ports:
      - 9200:9200
      - 9300:9300
  kibana:
    image: kibana:6.4.0
    container_name: kibana
    links:  #同一个compose文件管理的服务可以直接用服务名访问，如果要给服务取别名则可以用links实现，如下面的es就是elasticsearch服务的别名
      - elasticsearch:es #可以用es这个域名访问elasticsearch服务
    depends_on:
      - elasticsearch #kibana在elasticsearch启动之后再启动
    environment:
      - "elasticsearch.hosts=http://es:9200" #设置访问elasticsearch的地址
    ports:
      - 5601:5601
  redis:
    image: redis
    container_name: redis
    command: redis-server /etc/redis/redis.conf --appendonly yes
    volumes:
      - /usr/local/var/redis/data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf
      - ./config/localtime:/etc/localtime:ro
    ports:
      - 6379:6379

  filebeat:
    image: docker.elastic.co/beats/filebeat:6.5.4
    container_name: filebeat
    privileged: true
    volumes:
      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml
      - /usr/local/var/log/redis.log:/usr/local/var/log/redis.log
#      - /data/web/app/runtime/logs/buyer:/data/web/app/runtime/logs/buyer
    depends_on:
      - elasticsearch #kibana在elasticsearch启动之后再启动
  redis_exporter:
    image: oliver006/redis_exporter:v1.6.1-arm
    container_name: redis_exporter
    volumes:
      - ./config/localtime:/etc/localtime:ro
    environment:
      - "REDIS_ADDR=redis://192.168.3.9:6379"
      - "REDIS_PASSWORD=886887"
    ports:
      - 9121:9121
    depends_on:
      - redis
  mysql:
    image: mysql/mysql-server:5.7
    container_name: mysql
    command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --default-authentication-plugin=mysql_native_password
    restart: always
    environment:
      - "TZ=Asia/Shanghai" # 设置容器时区与宿主机保持一致
      - "MYSQL_ROOT_PASSWORD=886887"
    volumes:
      - ./config/localtime:/etc/localtime:ro # 设置容器时区与宿主机保持一致
      - /usr/local/var/mysql:/var/lib/mysql # 映射数据库保存目录到宿主机，防止数据丢失
      - ./mysql:/etc/mysql # 映射数据库配置文件
    ports:
      - 3306:3306
  mysql_exporter:
    image: prom/mysqld-exporter
    container_name: mysql_exporer
    volumes:
      - ./config/localtime:/etc/localtime:ro
    ports:
      - 9104:9104
    environment:
      - "DATA_SOURCE_NAME=root:886887@(192.168.3.9:3306)/final"
    depends_on:
      - mysql
  gitlab:
    image: 'gitlab/gitlab-ce:latest'
    restart: always
    hostname: 'gitlab'
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'http://gitlab.example.com:8929' # http协议所使用的访问地址,不加端口默认80
        gitlab_rails['gitlab_shell_ssh_port'] = 2224 # 此端口是run时22端口映射的2224端口       账号root
    ports:
      - '8929:8929'
      - '2224:22'
    volumes:
      - '/usr/local/etc/gitlab:/etc/gitlab'
      - '/usr/local/var/log/gitlab:/var/log/gitlab'
      - '/usr/local/opt/gitlab:/var/opt/gitlab'

